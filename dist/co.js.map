{"version":3,"sources":["../src/co.js"],"names":["co","require","fetch","res","json","movie","summary","console","log"],"mappings":";;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,QAAQD,QAAQ,YAAR,CAAd;;AAEAD,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACiBE,MAAM,yCAAN,CADjB;;AAAA;AACKC,aADL;AAAA;AAAA,iBAEmBA,IAAIC,IAAJ,EAFnB;;AAAA;AAEKC,eAFL;AAGKC,iBAHL,GAGeD,MAAMC,OAHrB,EAG6B;;AAC9BC,kBAAQC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;;AAJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAQA;;AAEA;;AAEA;;AAEA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"co.js","sourcesContent":["const co = require('co')\nconst fetch = require('node-fetch')\n\nco(function *() {\n  const res = yield fetch('https://api.douban.com/v2/movie/1291843') //透過yield 發出異步的請求\n  const movie = yield res.json()\n  const summary = movie.summary //摘要\n  console.log('summary', summary);\n})\n\n\n//透過co的同步方式內來執行異步的獲取\n\n//使用co 可以實現自動執行完成 是逐步執行\n\n//co 只能要到對象 數組 函數\n\n//字負串 跟 布耳值 是無法使用 co 獲取\n\n\n\n\n//以下是演示 co 過程的執行方式採用\n// function run (generator) {\n//   const iterator = generator()\n//   const it = iterator.next()\n//   const promise = it.value\n//\n//   promise.then(data => {\n//     const it2 = iterator.next(data)\n//     const promise2 = it2.value\n//\n//     promise2.then(data2 => {\n//       iterator.next(data2)\n//     })\n//   })\n// }\n//\n// run(function *() {\n//     const res = yield fetch('https://api.douban.com/v2/movie/1291843') //透過yield 發出異步的請求\n//     const movie = yield res.json()\n//     const summary = movie.summary //摘要\n//     console.log('summary', summary);\n// })\n"]}