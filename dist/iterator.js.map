{"version":3,"sources":["../src/iterator.js"],"names":["makeIterator","arr","i","length","gen","console","log","next","value","done"],"mappings":";;;;;;;;sDAyBUA,Y;;AAzBV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA,SAAUA,YAAV,CAAwBC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,WADX,GACe,CADf;;AAAA;AAAA,gBACkBA,IAAID,IAAIE,MAD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEUF,IAAIC,CAAJ,CAFV;;AAAA;AACkCA,aADlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAME,MAAMJ,aAAa,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAb,CAAZ;;AAEAK,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWE,IAA7B","file":"iterator.js","sourcesContent":["// function makeIterator (arr) {\n//   let nextIndex = 0\n//\n//   //返回一個迭代器對象\n//   return {\n//     next: () => {\n//       // next: () 方法返回的結果對象\n//       if (nextIndex < arr.length) {\n//         return { value: arr[nextIndex++], done: false } //因為初始值是0 所以要＋＋ 每調用跑一次\n//       } else {\n//           return { done: true }\n//         }\n//       }\n//     }\n//   }\n//\n// const it = makeIterator(['吃飯', '睡覺', '上上網']) //(調用makeIterator返回的結果)\n// console.log('首先', it.next().value)\n// console.log('其次', it.next().value)\n// console.log('然後', it.next().value)\n// console.log('最後', it.next().done)\n\n\n\n//使用生成器 * 就是要簡化 上面寫法而生的\nfunction *makeIterator (arr) {\n  for (let i = 0; i < arr.length; i++) {\n    yield arr[i] //yield可用於斷點執行\n  }\n}\n\nconst gen = makeIterator(['吃飯', '睡覺', '上上網'])\n\nconsole.log('首先', gen.next().value)\nconsole.log('其次', gen.next().value)\nconsole.log('然後', gen.next().value)\nconsole.log('最後', gen.next().done)\n"]}