{"version":3,"sources":["../src/async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","util","promisify","readFile"],"mappings":";;;;;;;;;;;sFAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,gBAAV,CADnB;;AAAA;AACMC,gBADN;;AAEEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,oBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AAlDf,IAAMC,KAAKC,QAAQ,IAAR,CAAX,C,CAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMT,YAAYU,KAAKC,SAAL,CAAeH,GAAGI,QAAlB,CAAlB;;AAOAL,O,CAAQ","file":"async.js","sourcesContent":["const fs = require('fs') //引用文件的接口\n\n//第一階段回調函數\n// function readFile (cb) {\n//   fs.readFile('./package.json', (err, data) => {\n//     if (err) return cb(err)\n//     cb && cb(null, data)\n//   })\n// }\n//\n// readFile((err, data)) => {\n//   if (!err) {\n//     data = JSON.parse(data)\n//     console.log(data.name);\n//   }\n// })\n\n//第二階段 promsie\n// function readFileAsync (path) {\n//   return new Promise((resolve, reject) => {\n//     fs.readFile(path, (err, data) => {\n//       if (err) reject(err)\n//       else resolve(data)\n//     })\n//   })\n// }\n//\n// readFileAsync('./package.json')\n// .then(data => {\n//   data = JSON.parse(data)\n//   console.log(data.name);\n// })\n// .catch(err => {\n//   console.log(err);\n// })\n\n//第三個階段 co + Generator function + Promise\n\n// const co = require('co')\nconst util = require('util')\n//\n// co(function *() {\n//   let data = yield util.promisify(fs.readFile)('./package.json')\n//   data = JSON.parse(data)\n//   console.log(data.name);\n// })\n\n//第四個階段 Async 統一世界\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init () {\n  let data = await readAsync('./package.json')\n  data = JSON.parse(data)\n  console.log(data.name);\n}\ninit()  //調用\n"]}